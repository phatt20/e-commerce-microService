// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: modules/order/orderPb/orderPb.proto

package orderPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderQueryClient is the client API for OrderQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderQueryClient interface {
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
}

type orderQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderQueryClient(cc grpc.ClientConnInterface) OrderQueryClient {
	return &orderQueryClient{cc}
}

func (c *orderQueryClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/OrderQuery/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderQueryServer is the server API for OrderQuery service.
// All implementations must embed UnimplementedOrderQueryServer
// for forward compatibility
type OrderQueryServer interface {
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	mustEmbedUnimplementedOrderQueryServer()
}

// UnimplementedOrderQueryServer must be embedded to have forward compatible implementations.
type UnimplementedOrderQueryServer struct {
}

func (UnimplementedOrderQueryServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderQueryServer) mustEmbedUnimplementedOrderQueryServer() {}

// UnsafeOrderQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderQueryServer will
// result in compilation errors.
type UnsafeOrderQueryServer interface {
	mustEmbedUnimplementedOrderQueryServer()
}

func RegisterOrderQueryServer(s grpc.ServiceRegistrar, srv OrderQueryServer) {
	s.RegisterService(&OrderQuery_ServiceDesc, srv)
}

func _OrderQuery_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueryServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderQuery/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueryServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderQuery_ServiceDesc is the grpc.ServiceDesc for OrderQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderQuery",
	HandlerType: (*OrderQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _OrderQuery_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/order/orderPb/orderPb.proto",
}
